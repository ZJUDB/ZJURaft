// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR RequestVoteArgs::RequestVoteArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_.candidateid_)*/0
  , /*decltype(_impl_.lastlogindex_)*/0
  , /*decltype(_impl_.lastlogterm_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestVoteArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestVoteArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestVoteArgsDefaultTypeInternal() {}
  union {
    RequestVoteArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestVoteArgsDefaultTypeInternal _RequestVoteArgs_default_instance_;
PROTOBUF_CONSTEXPR RequestVoteReply::RequestVoteReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_.votegranted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestVoteReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestVoteReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestVoteReplyDefaultTypeInternal() {}
  union {
    RequestVoteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestVoteReplyDefaultTypeInternal _RequestVoteReply_default_instance_;
PROTOBUF_CONSTEXPR AppendEntries::AppendEntries(
    ::_pbi::ConstantInitialized) {}
struct AppendEntriesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesDefaultTypeInternal() {}
  union {
    AppendEntries _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesDefaultTypeInternal _AppendEntries_default_instance_;
PROTOBUF_CONSTEXPR AppendEntriesArgs::AppendEntriesArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.log_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_.leaderid_)*/0
  , /*decltype(_impl_.prevlogindex_)*/0
  , /*decltype(_impl_.prevlogterm_)*/0
  , /*decltype(_impl_.leadercommit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendEntriesArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesArgsDefaultTypeInternal() {}
  union {
    AppendEntriesArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesArgsDefaultTypeInternal _AppendEntriesArgs_default_instance_;
PROTOBUF_CONSTEXPR AppendEntriesReply::AppendEntriesReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.conflictindex_)*/0
  , /*decltype(_impl_.conflictterm_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendEntriesReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesReplyDefaultTypeInternal() {}
  union {
    AppendEntriesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesReplyDefaultTypeInternal _AppendEntriesReply_default_instance_;
static ::_pb::Metadata file_level_metadata_raft_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_raft_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_raft_2eproto = nullptr;

const uint32_t TableStruct_raft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RequestVoteArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RequestVoteArgs, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::RequestVoteArgs, _impl_.candidateid_),
  PROTOBUF_FIELD_OFFSET(::RequestVoteArgs, _impl_.lastlogindex_),
  PROTOBUF_FIELD_OFFSET(::RequestVoteArgs, _impl_.lastlogterm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RequestVoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RequestVoteReply, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::RequestVoteReply, _impl_.votegranted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppendEntries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, _impl_.leaderid_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, _impl_.prevlogindex_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, _impl_.prevlogterm_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, _impl_.log_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesArgs, _impl_.leadercommit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppendEntriesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AppendEntriesReply, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesReply, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesReply, _impl_.conflictindex_),
  PROTOBUF_FIELD_OFFSET(::AppendEntriesReply, _impl_.conflictterm_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::RequestVoteArgs)},
  { 10, -1, -1, sizeof(::RequestVoteReply)},
  { 18, -1, -1, sizeof(::AppendEntries)},
  { 24, -1, -1, sizeof(::AppendEntriesArgs)},
  { 36, -1, -1, sizeof(::AppendEntriesReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_RequestVoteArgs_default_instance_._instance,
  &::_RequestVoteReply_default_instance_._instance,
  &::_AppendEntries_default_instance_._instance,
  &::_AppendEntriesArgs_default_instance_._instance,
  &::_AppendEntriesReply_default_instance_._instance,
};

const char descriptor_table_protodef_raft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nraft.proto\"_\n\017RequestVoteArgs\022\014\n\004Term\030"
  "\001 \001(\005\022\023\n\013CandidateId\030\002 \001(\005\022\024\n\014LastLogInd"
  "ex\030\003 \001(\005\022\023\n\013LastLogTerm\030\004 \001(\005\"5\n\020Request"
  "VoteReply\022\014\n\004Term\030\001 \001(\005\022\023\n\013VoteGranted\030\002"
  " \001(\010\"\017\n\rAppendEntries\"\201\001\n\021AppendEntriesA"
  "rgs\022\014\n\004Term\030\001 \001(\005\022\020\n\010LeaderId\030\002 \001(\005\022\024\n\014P"
  "revLogIndex\030\003 \001(\005\022\023\n\013PrevLogTerm\030\004 \001(\005\022\013"
  "\n\003Log\030\005 \001(\014\022\024\n\014LeaderCommit\030\006 \001(\005\"`\n\022App"
  "endEntriesReply\022\014\n\004Term\030\001 \001(\005\022\017\n\007Success"
  "\030\002 \001(\010\022\025\n\rConflictIndex\030\003 \001(\005\022\024\n\014Conflic"
  "tTerm\030\004 \001(\0052x\n\004RAFT\0224\n\013RequestVote\022\020.Req"
  "uestVoteArgs\032\021.RequestVoteReply\"\000\022:\n\rApp"
  "endEntries\022\022.AppendEntriesArgs\032\023.AppendE"
  "ntriesReply\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_raft_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_raft_2eproto = {
    false, false, 541, descriptor_table_protodef_raft_2eproto,
    "raft.proto",
    &descriptor_table_raft_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_raft_2eproto::offsets,
    file_level_metadata_raft_2eproto, file_level_enum_descriptors_raft_2eproto,
    file_level_service_descriptors_raft_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_raft_2eproto_getter() {
  return &descriptor_table_raft_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_raft_2eproto(&descriptor_table_raft_2eproto);

// ===================================================================

class RequestVoteArgs::_Internal {
 public:
};

RequestVoteArgs::RequestVoteArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RequestVoteArgs)
}
RequestVoteArgs::RequestVoteArgs(const RequestVoteArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestVoteArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.candidateid_){}
    , decltype(_impl_.lastlogindex_){}
    , decltype(_impl_.lastlogterm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lastlogterm_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:RequestVoteArgs)
}

inline void RequestVoteArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){0}
    , decltype(_impl_.candidateid_){0}
    , decltype(_impl_.lastlogindex_){0}
    , decltype(_impl_.lastlogterm_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestVoteArgs::~RequestVoteArgs() {
  // @@protoc_insertion_point(destructor:RequestVoteArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestVoteArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestVoteArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestVoteArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestVoteArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lastlogterm_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.lastlogterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CandidateId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.candidateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LastLogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lastlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LastLogTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.lastlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestVoteArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestVoteArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 CandidateId = 2;
  if (this->_internal_candidateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_candidateid(), target);
  }

  // int32 LastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_lastlogindex(), target);
  }

  // int32 LastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_lastlogterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestVoteArgs)
  return target;
}

size_t RequestVoteArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestVoteArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // int32 CandidateId = 2;
  if (this->_internal_candidateid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_candidateid());
  }

  // int32 LastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lastlogindex());
  }

  // int32 LastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lastlogterm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVoteArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestVoteArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVoteArgs::GetClassData() const { return &_class_data_; }


void RequestVoteArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestVoteArgs*>(&to_msg);
  auto& from = static_cast<const RequestVoteArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RequestVoteArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_candidateid() != 0) {
    _this->_internal_set_candidateid(from._internal_candidateid());
  }
  if (from._internal_lastlogindex() != 0) {
    _this->_internal_set_lastlogindex(from._internal_lastlogindex());
  }
  if (from._internal_lastlogterm() != 0) {
    _this->_internal_set_lastlogterm(from._internal_lastlogterm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteArgs::CopyFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestVoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteArgs::IsInitialized() const {
  return true;
}

void RequestVoteArgs::InternalSwap(RequestVoteArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteArgs, _impl_.lastlogterm_)
      + sizeof(RequestVoteArgs::_impl_.lastlogterm_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteArgs, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[0]);
}

// ===================================================================

class RequestVoteReply::_Internal {
 public:
};

RequestVoteReply::RequestVoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RequestVoteReply)
}
RequestVoteReply::RequestVoteReply(const RequestVoteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestVoteReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.votegranted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.votegranted_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.votegranted_));
  // @@protoc_insertion_point(copy_constructor:RequestVoteReply)
}

inline void RequestVoteReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){0}
    , decltype(_impl_.votegranted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestVoteReply::~RequestVoteReply() {
  // @@protoc_insertion_point(destructor:RequestVoteReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestVoteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestVoteReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestVoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestVoteReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.votegranted_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.votegranted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool VoteGranted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.votegranted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestVoteReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestVoteReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // bool VoteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_votegranted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestVoteReply)
  return target;
}

size_t RequestVoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestVoteReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // bool VoteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVoteReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestVoteReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVoteReply::GetClassData() const { return &_class_data_; }


void RequestVoteReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestVoteReply*>(&to_msg);
  auto& from = static_cast<const RequestVoteReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RequestVoteReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_votegranted() != 0) {
    _this->_internal_set_votegranted(from._internal_votegranted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteReply::CopyFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteReply::IsInitialized() const {
  return true;
}

void RequestVoteReply::InternalSwap(RequestVoteReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteReply, _impl_.votegranted_)
      + sizeof(RequestVoteReply::_impl_.votegranted_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteReply, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[1]);
}

// ===================================================================

class AppendEntries::_Internal {
 public:
};

AppendEntries::AppendEntries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:AppendEntries)
}
AppendEntries::AppendEntries(const AppendEntries& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AppendEntries* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AppendEntries)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntries::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntries::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AppendEntries::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[2]);
}

// ===================================================================

class AppendEntriesArgs::_Internal {
 public:
};

AppendEntriesArgs::AppendEntriesArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AppendEntriesArgs)
}
AppendEntriesArgs::AppendEntriesArgs(const AppendEntriesArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendEntriesArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.log_){}
    , decltype(_impl_.term_){}
    , decltype(_impl_.leaderid_){}
    , decltype(_impl_.prevlogindex_){}
    , decltype(_impl_.prevlogterm_){}
    , decltype(_impl_.leadercommit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log().empty()) {
    _this->_impl_.log_.Set(from._internal_log(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.leadercommit_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.leadercommit_));
  // @@protoc_insertion_point(copy_constructor:AppendEntriesArgs)
}

inline void AppendEntriesArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.log_){}
    , decltype(_impl_.term_){0}
    , decltype(_impl_.leaderid_){0}
    , decltype(_impl_.prevlogindex_){0}
    , decltype(_impl_.prevlogterm_){0}
    , decltype(_impl_.leadercommit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppendEntriesArgs::~AppendEntriesArgs() {
  // @@protoc_insertion_point(destructor:AppendEntriesArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendEntriesArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.log_.Destroy();
}

void AppendEntriesArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendEntriesArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:AppendEntriesArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.log_.ClearToEmpty();
  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.leadercommit_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.leadercommit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LeaderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PrevLogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.prevlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PrevLogTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.prevlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Log = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LeaderCommit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.leadercommit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntriesArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppendEntriesArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 LeaderId = 2;
  if (this->_internal_leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_leaderid(), target);
  }

  // int32 PrevLogIndex = 3;
  if (this->_internal_prevlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_prevlogindex(), target);
  }

  // int32 PrevLogTerm = 4;
  if (this->_internal_prevlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_prevlogterm(), target);
  }

  // bytes Log = 5;
  if (!this->_internal_log().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_log(), target);
  }

  // int32 LeaderCommit = 6;
  if (this->_internal_leadercommit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_leadercommit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppendEntriesArgs)
  return target;
}

size_t AppendEntriesArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppendEntriesArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Log = 5;
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_log());
  }

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // int32 LeaderId = 2;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_leaderid());
  }

  // int32 PrevLogIndex = 3;
  if (this->_internal_prevlogindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prevlogindex());
  }

  // int32 PrevLogTerm = 4;
  if (this->_internal_prevlogterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prevlogterm());
  }

  // int32 LeaderCommit = 6;
  if (this->_internal_leadercommit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_leadercommit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendEntriesArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesArgs::GetClassData() const { return &_class_data_; }


void AppendEntriesArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendEntriesArgs*>(&to_msg);
  auto& from = static_cast<const AppendEntriesArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AppendEntriesArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_log().empty()) {
    _this->_internal_set_log(from._internal_log());
  }
  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_leaderid() != 0) {
    _this->_internal_set_leaderid(from._internal_leaderid());
  }
  if (from._internal_prevlogindex() != 0) {
    _this->_internal_set_prevlogindex(from._internal_prevlogindex());
  }
  if (from._internal_prevlogterm() != 0) {
    _this->_internal_set_prevlogterm(from._internal_prevlogterm());
  }
  if (from._internal_leadercommit() != 0) {
    _this->_internal_set_leadercommit(from._internal_leadercommit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesArgs::CopyFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesArgs::IsInitialized() const {
  return true;
}

void AppendEntriesArgs::InternalSwap(AppendEntriesArgs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_, lhs_arena,
      &other->_impl_.log_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.leadercommit_)
      + sizeof(AppendEntriesArgs::_impl_.leadercommit_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[3]);
}

// ===================================================================

class AppendEntriesReply::_Internal {
 public:
};

AppendEntriesReply::AppendEntriesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AppendEntriesReply)
}
AppendEntriesReply::AppendEntriesReply(const AppendEntriesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendEntriesReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.conflictindex_){}
    , decltype(_impl_.conflictterm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.conflictterm_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.conflictterm_));
  // @@protoc_insertion_point(copy_constructor:AppendEntriesReply)
}

inline void AppendEntriesReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){0}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.conflictindex_){0}
    , decltype(_impl_.conflictterm_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppendEntriesReply::~AppendEntriesReply() {
  // @@protoc_insertion_point(destructor:AppendEntriesReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendEntriesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendEntriesReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendEntriesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AppendEntriesReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.conflictterm_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.conflictterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ConflictIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.conflictindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ConflictTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.conflictterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntriesReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppendEntriesReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // bool Success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // int32 ConflictIndex = 3;
  if (this->_internal_conflictindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_conflictindex(), target);
  }

  // int32 ConflictTerm = 4;
  if (this->_internal_conflictterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_conflictterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppendEntriesReply)
  return target;
}

size_t AppendEntriesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppendEntriesReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // bool Success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 ConflictIndex = 3;
  if (this->_internal_conflictindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_conflictindex());
  }

  // int32 ConflictTerm = 4;
  if (this->_internal_conflictterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_conflictterm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendEntriesReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesReply::GetClassData() const { return &_class_data_; }


void AppendEntriesReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendEntriesReply*>(&to_msg);
  auto& from = static_cast<const AppendEntriesReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_conflictindex() != 0) {
    _this->_internal_set_conflictindex(from._internal_conflictindex());
  }
  if (from._internal_conflictterm() != 0) {
    _this->_internal_set_conflictterm(from._internal_conflictterm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesReply::CopyFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesReply::IsInitialized() const {
  return true;
}

void AppendEntriesReply::InternalSwap(AppendEntriesReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesReply, _impl_.conflictterm_)
      + sizeof(AppendEntriesReply::_impl_.conflictterm_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesReply, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RequestVoteArgs*
Arena::CreateMaybeMessage< ::RequestVoteArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestVoteArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::RequestVoteReply*
Arena::CreateMaybeMessage< ::RequestVoteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestVoteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::AppendEntries*
Arena::CreateMaybeMessage< ::AppendEntries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppendEntries >(arena);
}
template<> PROTOBUF_NOINLINE ::AppendEntriesArgs*
Arena::CreateMaybeMessage< ::AppendEntriesArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppendEntriesArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::AppendEntriesReply*
Arena::CreateMaybeMessage< ::AppendEntriesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppendEntriesReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
